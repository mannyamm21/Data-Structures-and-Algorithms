import java.util.*;
public class BinaryTree{
    static class Node {
        int data;
        Node left;
        Node right;

        Node(int data){
            this.data=data;
            this.left=left;
            this.right=right;
        }
    }
    
    public static Node insert(Node root , int val){
        if(root == null){
            root = new Node(val);
            return root;
        }
        if(root.data > val){
            root.left=insert(root.left,val);
        }
        else{
            root.right = insert(root.right,val);
        }
        return root;
    }
    
    public static void inorder(Node root){
        if(root == null){
            return;
        }
        inorder(root.left);
        System.out.print(root.data+"->");
        inorder(root.right);
    }
    
    public static void preorder(Node root){
        if(root==null){
            return;
        }
        System.out.print(root.data+"->");
        preorder(root.left);
        preorder(root.right);
    }
    
    public static void postorder(Node root){
        if(root==null){
            return;
        }
        postorder(root.left);
        postorder(root.right);
        System.out.print(root.data+"->");
    }
    
    public static int height(Node root){
        if(root==null){
            return 0;
        }
        return Math.max(height(root.left),height(root.right))+1;
    }
    
    public static int maxValue(Node root){
        if(root == null) return Integer.MIN_VALUE;
        return Math.max(root.data,Math.max(maxValue(root.left),maxValue(root.right)));
    }
    
    public static ArrayList<Integer> Levelorder(Node root){
        Queue<Node> q = new LinkedList();
        q.add(root);
        ArrayList<Integer> list = new ArrayList();
        while(!q.isEmpty()){
            Node curr = q.poll();
            list.add(curr.data);
            
            if(curr.left != null){
                q.add(curr.left);
            }if(curr.right != null){
                q.add(curr.right);
            }
        }
        return list;
    }
    
    public static void main(String args[]){
        int [] arr = {5,6,8,9,4};
        Node root=null;
        for(int i=0;i<arr.length;i++){
            root = insert(root,arr[i]);
        }
        // inorder(root);
        // preorder(root);
        // postorder(root);
        //System.out.print(height(root));
        //System.out.print(maxValue(root));
        //System.out.print(Levelorder(root));
        
        
    }
}
