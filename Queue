//Queue Using Linkedlist
public class MyQueueLinkedList{ 
    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            next = null;
        }
    }
    
    Node front;
    Node rear;
    
    void push(int a){
        Node newnode = new Node(a);
        if(front == null){
            front = rear = newnode;
            
        }else{
            rear.next = newnode;
            rear = newnode;
        }
    }
    
    int pop(){
        if(front == null){
            return -1;
        }
        int res = front.data;
        if(front == rear){
            front = rear = null;
        }else{
            front = front.next;
        }
        return res;
    }
    
    public static void main (String arg[]){
        MyQueueLinkedList q = new MyQueueLinkedList();
        q.push(10);
        q.push(5);
        q.push(9);
        q.push(8);
        System.out.print(q.pop());
    }
}
--------------------------------------------------------------
//Queue using Stack
public class MyQueueStack{
    Stack<Integer> s1 = new Stack<>();
    Stack<Integer> s2 = new Stack<>();
    
    public  boolean isEmpty(){
            return s1.isEmpty();
        }
    public  void add(int data){
        while(!s1.isEmpty()){
            s2.push(s1.pop());
        }
        s1.push(data);
        while (!s2.isEmpty()){
            s1.push(s2.pop());
        }
        
    }
    public  int remove(){
        return s1.pop();
    }
    public  int peek(){
        return s1.peek();
    }
    

    public static void main(String[] args) {
        MyQueueStack q = new MyQueueStack();
        q.add(1);
        q.add(2);
        q.add(3);
        q.add(4);
        while (!q.isEmpty()){
            System.out.println(q.peek());
            q.remove();
        }
    }
}
